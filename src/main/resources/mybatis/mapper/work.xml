<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="work">




   <select id="getInventoryStatusList" parameterType="Work" resultType="Work">
      SELECT * FROM tb_medication_situation
      WHERE `date` LIKE CONCAT(#{startDate}, '%')
   </select>


   <!-- 재고관리 업데이트 -->
   <update id="inventoryStatusUpdate" parameterType="Work">
     UPDATE tb_medication_situation
  <set>
    <if test="capa_now_month != null and capa_now_month != ''">capa_now_month = #{capa_now_month},</if>
    <if test="month_ton != null and month_ton != ''">month_ton = #{month_ton},</if>
    <if test="percent_month != null and percent_month != ''">percent_month = #{percent_month},</if>
    <if test="bujok_month != null and bujok_month != ''">bujok_month = #{bujok_month},</if>
    <if test="start_month != null and start_month != ''">start_month = #{start_month},</if>

    <if test="m_code2 != null and m_code2 != ''">m_code2 = #{m_code2},</if>
    <if test="ex_mch_name != null and ex_mch_name != ''">ex_mch_name = #{ex_mch_name},</if>
    <if test="drug_name != null and drug_name != ''">drug_name = #{drug_name},</if>
    <if test="startDate != null and startDate != ''">startDate = #{startDate},</if>
    <if test="id != null and id != ''">id = #{id},</if>
    <if test="date != null and date != ''">date = #{date},</if>
    <if test="unit != null and unit != ''">unit = #{unit},</if>
    <if test="next_month != null and next_month != ''">next_month = #{next_month},</if>
    <if test="stock_cnt != null and stock_cnt != ''">stock_cnt = #{stock_cnt},</if>
    <if test="geomet_g1 != null and geomet_g1 != ''">geomet_g1 = #{geomet_g1},</if>
    <if test="geomet_g2 != null and geomet_g2 != ''">geomet_g2 = #{geomet_g2},</if>
    <if test="geomet_adding != null and geomet_adding != ''">geomet_adding = #{geomet_adding},</if>
    <if test="pluse != null and pluse != ''">pluse = #{pluse},</if>
    <if test="ml_h != null and ml_h != ''">ml_h = #{ml_h},</if>
    <if test="ml_g != null and ml_g != ''">ml_g = #{ml_g},</if>
    <if test="k_black != null and k_black != ''">k_black = #{k_black},</if>
    <if test="naoh_99 != null and naoh_99 != ''">naoh_99 = #{naoh_99},</if>
    <if test="sc_300a != null and sc_300a != ''">sc_300a = #{sc_300a},</if>
    <if test="sc330b_3x != null and sc330b_3x != ''">sc330b_3x = #{sc330b_3x},</if>
    <if test="sc330_liquid != null and sc330_liquid != ''">sc330_liquid = #{sc330_liquid},</if>
    <if test="geomet_sus != null and geomet_sus != ''">geomet_sus = #{geomet_sus},</if>
    <if test="ed2800_a_black != null and ed2800_a_black != ''">ed2800_a_black = #{ed2800_a_black},</if>
    <if test="ed2800_b != null and ed2800_b != ''">ed2800_b = #{ed2800_b},</if>
    <if test="geomet_005 != null and geomet_005 != ''">geomet_005 = #{geomet_005},</if>
    <if test="geomet_069 != null and geomet_069 != ''">geomet_069 = #{geomet_069},</if>
    <if test="geomet_p_210 != null and geomet_p_210 != ''">geomet_p_210 = #{geomet_p_210},</if>
    <if test="geomet_sq_70 != null and geomet_sq_70 != ''">geomet_sq_70 = #{geomet_sq_70},</if>
    <if test="created_at != null and created_at != ''">created_at = #{created_at},</if>
    <if test="status != null and status != ''">status = #{status},</if>
    <if test="nextMonth != null and nextMonth != ''">nextMonth = #{nextMonth},</if>
    <if test="filed_name != null and filed_name != ''">filed_name = #{filed_name},</if>
    <if test="facility_name != null and facility_name != ''">facility_name = #{facility_name},</if>
    <if test="c_min != null and c_min != ''">c_min = #{c_min},</if>
    <if test="h_min != null and h_min != ''">h_min = #{h_min},</if>
    <if test="a != null and a != ''">a = #{a},</if>
    <if test="b != null and b != ''">b = #{b},</if>
    <if test="c != null and c != ''">c = #{c},</if>
    <if test="d != null and d != ''">d = #{d},</if>
    <if test="g != null and g != ''">g = #{g},</if>
    <if test="h != null and h != ''">h = #{h},</if>
    <if test="k != null and k != ''">k = #{k},</if>
    <if test="l != null and l != ''">l = #{l},</if>
    <if test="j != null and j != ''">j = #{j},</if>
    <if test="i != null and i != ''">i = #{i},</if>
    <if test="m != null and m != ''">m = #{m},</if>
    <if test="n != null and n != ''">n = #{n},</if>
    <if test="o != null and o != ''">o = #{o},</if>
    <if test="p != null and p != ''">p = #{p},</if>
    <if test="r != null and r != ''">r = #{r},</if>
    <if test="s != null and s != ''">s = #{s},</if>
    <if test="t != null and t != ''">t = #{t},</if>
    <if test="u != null and u != ''">u = #{u},</if>
    <if test="q != null and q != ''">q = #{q},</if>
    <if test="weight != null and weight != ''">weight = #{weight},</if>
    <if test="weight_wr != null and weight_wr != ''">weight_wr = #{weight_wr},</if>
    <if test="r_num != null and r_num != ''">r_num = #{r_num},</if>
    <if test="start_time != null and start_time != ''">start_time = #{start_time},</if>
    <if test="end_time != null and end_time != ''">end_time = #{end_time},</if>
    <if test="tong_day != null and tong_day != ''">tong_day = #{tong_day},</if>
    <if test="weight_day != null and weight_day != ''">weight_day = #{weight_day},</if>
    <if test="item_nm != null and item_nm != ''">item_nm = #{item_nm},</if>
    <if test="item_cd != null and item_cd != ''">item_cd = #{item_cd},</if>
    <if test="next_facility != null and next_facility != ''">next_facility = #{next_facility},</if>
    <if test="e != null and e != ''">e = #{e},</if>
    <if test="f != null and f != ''">f = #{f},</if>
    <if test="s_time != null and s_time != ''">s_time = #{s_time},</if>
    <if test="e_time != null and e_time != ''">e_time = #{e_time},</if>
    <if test="m_code != null and m_code != ''">m_code = #{m_code},</if>
    <if test="mach_code != null and mach_code != ''">mach_code = #{mach_code},</if>
    <if test="tong_sum != null and tong_sum != ''">tong_sum = #{tong_sum},</if>
    <if test="weight_sum != null and weight_sum != ''">weight_sum = #{weight_sum},</if>
    <if test="work_time != null and work_time != ''">work_time = #{work_time},</if>
    <if test="work_hour != null and work_hour != ''">work_hour = #{work_hour},</if>
    <if test="work_percent != null and work_percent != ''">work_percent = #{work_percent},</if>
    <if test="sum_time != null and sum_time != ''">sum_time = #{sum_time},</if>
    <if test="sum_percent != null and sum_percent != ''">sum_percent = #{sum_percent},</if>
    <if test="avg_day != null and avg_day != ''">avg_day = #{avg_day},</if>
    <if test="avg_sum != null and avg_sum != ''">avg_sum = #{avg_sum},</if>
    <if test="uph != null and uph != ''">uph = #{uph},</if>
    <if test="uph_sum != null and uph_sum != ''">uph_sum = #{uph_sum},</if>
    <if test="idx != null and idx != ''">idx = #{idx},</if>
    <if test="mch_code != null and mch_code != ''">mch_code = #{mch_code},</if>
    <if test="mch_name != null and mch_name != ''">mch_name = #{mch_name},</if>
    <if test="gb != null and gb != ''">gb = #{gb},</if>
    <if test="visc != null and visc != ''">visc = #{visc},</if>
    <if test="pre_temp != null and pre_temp != ''">pre_temp = #{pre_temp},</if>
    <if test="heat_temp != null and heat_temp != ''">heat_temp = #{heat_temp},</if>
    <if test="liq_temp != null and liq_temp != ''">liq_temp = #{liq_temp},</if>
    <if test="sg != null and sg != ''">sg = #{sg},</if>
    <if test="input_date != null and input_date != ''">input_date = #{input_date},</if>
    <if test="no != null and no != ''">no = #{no},</if>
    <if test="std_weight != null and std_weight != ''">std_weight = #{std_weight},</if>
    <if test="c_t != null and c_t != ''">c_t = #{c_t},</if>
    <if test="aa != null and aa != ''">aa = #{aa},</if>
    <if test="bb != null and bb != ''">bb = #{bb},</if>
    <if test="work_day != null and work_day != ''">work_day = #{work_day},</if>
    <if test="set_hr != null and set_hr != ''">set_hr = #{set_hr},</if>
    <if test="mok_hr != null and mok_hr != ''">mok_hr = #{mok_hr},</if>
    <if test="capa_day != null and capa_day != ''">capa_day = #{capa_day},</if>
    <if test="day_ton != null and day_ton != ''">day_ton = #{day_ton},</if>
    <if test="percent_day != null and percent_day != ''">percent_day = #{percent_day},</if>
    <if test="bujok_day != null and bujok_day != ''">bujok_day = #{bujok_day},</if>
    <if test="capa_month != null and capa_month != ''">capa_month = #{capa_month},</if>
    <if test="capa_sum != null and capa_sum != ''">capa_sum = #{capa_sum},</if>
    <if test="cc != null and cc != ''">cc = #{cc},</if>
    <if test="dd != null and dd != ''">dd = #{dd},</if>
    <if test="ee != null and ee != ''">ee = #{ee},</if>
    <if test="tong != null and tong != ''">tong = #{tong},</if>
    <if test="tong_night != null and tong_night != ''">tong_night = #{tong_night},</if>
    <if test="a1 != null and a1 != ''">a1 = #{a1},</if>
    <if test="a2 != null and a2 != ''">a2 = #{a2},</if>
    <if test="a3 != null and a3 != ''">a3 = #{a3},</if>
    <if test="a4 != null and a4 != ''">a4 = #{a4},</if>
    <if test="a5 != null and a5 != ''">a5 = #{a5},</if>
    <if test="a6 != null and a6 != ''">a6 = #{a6},</if>
    <if test="a7 != null and a7 != ''">a7 = #{a7},</if>
    <if test="a8 != null and a8 != ''">a8 = #{a8},</if>
    <if test="a9 != null and a9 != ''">a9 = #{a9},</if>
    <if test="a10 != null and a10 != ''">a10 = #{a10},</if>
    <if test="a11 != null and a11 != ''">a11 = #{a11},</if>
    <if test="a12 != null and a12 != ''">a12 = #{a12},</if>
    <if test="a13 != null and a13 != ''">a13 = #{a13},</if>
    <if test="inventory_type != null and inventory_type != ''">inventory_type = #{inventory_type},</if>
    <if test="getmet != null">getmet = #{getmet},</if>
    <if test="ml != null">ml = #{ml},</if>
    <if test="plus != null">plus = #{plus},</if>
  </set>
  WHERE id = #{id}
   </update>





<update id="insertinventoryStatus" parameterType="map">
  UPDATE tb_medication_situation
  SET
    `date` = #{date},
    `status` = #{status},
    `next_month` = #{next_month},
    `stock_cnt` = #{stock_cnt},
    <choose>
      <when test="drug_name == 'geomet_g1'">
        geomet_g1 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_g2'">
        geomet_g2 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_adding'">
        geomet_adding = #{field_name}
      </when>
      <when test="drug_name == 'pluse'">
        pluse = #{field_name}
      </when>
      <when test="drug_name == 'ml_h'">
        ml_h = #{field_name}
      </when>
      <when test="drug_name == 'ml_g'">
        ml_g = #{field_name}
      </when>
      <when test="drug_name == 'k_black'">
        k_black = #{field_name}
      </when>
      <when test="drug_name == 'naoh_99'">
        naoh_99 = #{field_name}
      </when>
      <when test="drug_name == 'sc_300a'">
        sc_300a = #{field_name}
      </when>
      <when test="drug_name == 'sc330b_3x'">
        sc330b_3x = #{field_name}
      </when>
      <when test="drug_name == 'sc330_liquid'">
        sc330_liquid = #{field_name}
      </when>
      <when test="drug_name == 'geomet_sus'">
        geomet_sus = #{field_name}
      </when>
      <when test="drug_name == 'ed2800_a_black'">
        ed2800_a_black = #{field_name}
      </when>
      <when test="drug_name == 'ed2800_b'">
        ed2800_b = #{field_name}
      </when>
      <when test="drug_name == 'geomet_005'">
        geomet_005 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_069'">
        geomet_069 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_p_210'">
        geomet_p_210 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_sq_70'">
        geomet_sq_70 = #{field_name}
      </when>
    </choose>
  WHERE id = #{id}
</update>







 <select id="getMachineEfficStatusList" resultType="Work">
    SELECT facility_name, a, b, c, d
    FROM v_machineefficstatus
</select>





<select id="getWorkDailyList" parameterType="Work" resultType="Work">
SELECT
  ROW_NUMBER() OVER(ORDER BY end_time) AS r_num,
  group_id,
  start_time,
  end_time,
  tong_day,
  weight_day,
  item_nm,
  item_cd,
  next_facility,
  wrk_ord_no,
  CASE 
    WHEN division_weight = 0 THEN 0
    ELSE CASE 
           WHEN (weight_day / division_weight) > 1 
           THEN FLOOR((weight_day / division_weight)) + 1 
           ELSE 1 
         END
  END AS a, /*분할횟수*/
  '' AS b,
  '' AS c,
  '' AS d,
  CASE 
    WHEN bb.wrk_ord_no LIKE '%WR%' THEN '재작업'
    ELSE '신규'
  END AS e,  /*구분(신규/재작업)*/
  '' AS f
FROM (
  SELECT 
    aa.mach_code,
    end_time,
    start_time,
    tong_day,
    weight_day,
    aa.item_cd,
    aa.item_nm,
    aa.wrk_ord_no,              
    ab.coating_nm AS next_facility,
    ab.group_id,
    aa.std_weight AS division_weight  <!-- 여기 변경됨 -->
  FROM (
    SELECT
      mach_code,
      barcode_no,
      ROUND(weight, 0) AS weight_day,
      1 AS tong_day,
      fac.facility_name,
      fac.std_weight,
      start_time,
      end_time,
      item_cd,
      item_nm,
      wrk_ord_no,
      LEAD(end_time) OVER(PARTITION BY mach_code, barcode_no ORDER BY end_time DESC) AS next_start_time
    FROM tb_lowdata_save AS lows
    INNER JOIN tb_facility AS fac
      ON lows.mach_code = fac.facility_mach_code
    WHERE 1=1
      <if test="s_time != null">
        AND end_time &gt;= #{s_time}
      </if>
      <if test="e_time != null">
        AND end_time &lt; #{e_time}
      </if>
      <if test="m_code2 != null and m_code2 != ''">
        AND mach_code IN (${m_code2})
      </if>
      AND weight IS NOT NULL
<!--       AND start_time IS NOT NULL
      AND end_time IS NOT NULL -->
  ) AS aa
  LEFT OUTER JOIN pwo_geo_division_data AS ab
    ON aa.item_cd = ab.item_cd
) AS bb
<where>
  <if test="m_code != null">
    mach_code = #{m_code}
  </if>
</where>
ORDER BY end_time;
</select>

  
  
 <select id="getWorkDailySum" parameterType="Work" resultType="Work">
 
 <![CDATA[
SELECT 
  mach_code, 
  facility_name, 
  tong_day,
  weight_day,
  w_seconds,
  ROUND(weight_day / tong_day, 1) AS avg_day, -- 표준중량
  TIME_FORMAT(SEC_TO_TIME(w_seconds), '%H:%i') AS work_time,
  ROUND(w_seconds / 3600.0, 1) AS ex_uph_hours, 
  ROUND(tong_day / NULLIF(ROUND(w_seconds / 3600.0, 1), 0), 1) AS uph,
  TIME_FORMAT(SEC_TO_TIME(w_m_sec), '%H:%i') AS sum_time,
  tong_month AS tong_sum, -- 월 생산 통수
  weight_month AS weight_sum, -- 월 누적 생산중량
  ROUND((tong_month * 3600) / NULLIF(w_m_sec, 0), 1) AS uph_sum,
  ROUND((ROUND(c_t_hour * (w_seconds / 3600), 1) - tong_day) * c_t, 0) AS stop_seconds, -- 일 비가동
  -- 비가동시간 포함된 가동효율 (순가동시간 / 가동시간)
  ROUND(
    ((w_seconds - ROUND((ROUND(c_t_hour * (w_seconds / 3600), 1) - tong_day) * c_t, 0)) / NULLIF(w_seconds, 0)) * 100, 1) AS work_percent,
  w_m_sec,
  ROUND((ROUND(c_t_hour * (w_m_sec / 3600), 1) - tong_day) * c_t, 0) AS stop_seconds_month, -- 월 비가동
  ROUND(
    ((w_m_sec - ROUND((ROUND(c_t_hour * (w_m_sec / 3600), 1) - tong_day) * c_t, 0)) / NULLIF(w_m_sec, 0)) * 100
  , 1) AS sum_percent
FROM (
    SELECT 
        mach_code,
        facility_name,
        SUM(tong_day) AS tong_day,
        SUM(weight_day) AS weight_day,
        MAX(w_hr) AS w_seconds,
        SUM(weight_month) AS weight_month,
        SUM(tong_month) AS tong_month,
        MAX(c_t) AS c_t,
        MAX(c_t_hour) AS c_t_hour,
        MAX(capa) AS capa,
        MAX(std_weight) AS std_weight,
        MAX(ch_idx) AS ch_idx,
        SUM(c_t_next) AS c_t_next,
        ROUND((c_t_next), 0) AS c_t_avg_day,
        MAX(end_time) AS max_end_time,
        MAX(work_gb) AS work_gb,
        MAX(w_cnt) AS w_cnt,
        SUM(sss) AS sasdasd,
        MAX(w_m_sec) AS w_m_sec

    FROM (
        SELECT *,
            IFNULL(TIMESTAMPDIFF(SECOND,end_time, end_time_next), 0) AS c_t_next
        FROM (
            SELECT 
                mach_code,
                facility_name,
                start_time,
                end_time,
                LEAD(end_time) OVER(PARTITION BY mach_code ORDER BY end_time) AS end_time_next,
                CASE 
                    WHEN end_time >= w_stime_day AND end_time <= w_etime_day THEN 1 
                    ELSE 0 
                END AS tong_day,
                CASE 
                    WHEN end_time >= w_stime_day AND end_time <= w_etime_day THEN ROUND(weight,1) 
                    ELSE 0 
                END AS weight_day,
                CAST(ROUND(c_t,0) AS INT) AS c_t,
                CAST(ROUND(capa,0) AS INT) AS capa,
                std_weight,
                ch_idx,
                w_hr,
                c_t_hour,
                work_gb,
                w_cnt,
                w_m_sec,
                CASE 
                    WHEN end_time >= w_stime_month AND end_time <= w_etime_month THEN 1 
                    ELSE 0 
                END AS tong_month,
                CASE 
                    WHEN end_time >= w_stime_month AND end_time <= w_etime_month THEN ROUND(weight,1) 
                    ELSE 0 
                END AS weight_month,
                CASE 
                    WHEN end_time IS NOT NULL THEN TIMESTAMPDIFF(SECOND, start_time, end_time) 
                    ELSE 0 
                END AS sss
            FROM tb_lowdata_save A
            LEFT OUTER JOIN (
                SELECT 
                    'JH_KR_01' AS du_plac_cd,
                    '02' AS du_plnt_cd,
                    CASE WHEN #{s_time2} = CURDATE() THEN 1 ELSE 0 END AS work_gb,
                    DATE_FORMAT(CASE WHEN #{s_time2} = CURDATE() 
                        THEN CONCAT(CURDATE(),' 08:00:00') ELSE CONCAT(#{s_time2},' 08:00:00') END,'%Y%m%d%H%i%s') AS w_stime_day,
                    DATE_FORMAT(DATE_ADD(CASE WHEN #{s_time2} = CURDATE() 
                        THEN CONCAT(CURDATE(),' 08:00:00') ELSE CONCAT(#{s_time2},' 08:00:00') END, INTERVAL 1 DAY), '%Y%m%d%H%i%s') AS w_etime_day,
                    DATE_FORMAT(CASE WHEN MONTH(#{s_time2}) = MONTH(CURDATE()) 
                        THEN CONCAT(CURDATE(),' 08:00:00') ELSE CONCAT(#{s_time2},' 08:00:00') END,'%Y%m01%H%i%s') AS w_stime_month,
                    DATE_FORMAT(DATE_ADD(CASE WHEN MONTH(#{s_time2}) = MONTH(CURDATE()) 
                        THEN CONCAT(LAST_DAY(CURDATE()),' 08:00:00') ELSE CONCAT(LAST_DAY(#{s_time2}),' 08:00:00') END, INTERVAL 1 DAY), '%Y%m%d%H%i%s') AS w_etime_month,
                    CASE 
                        WHEN #{s_time2} = CURDATE() THEN TIMESTAMPDIFF(SECOND, CONCAT(CURDATE(),' 08:00:00'), NOW()) 
                        ELSE 86400 
                    END AS w_hr,
                    CASE 
                        WHEN #{s_time2} = CURDATE() THEN DAY(CURDATE()) 
                        ELSE DAY(#{s_time2}) 
                    END AS w_cnt,
                    CASE 
                        WHEN #{s_time2} = CURDATE() THEN TIMESTAMPDIFF(SECOND, DATE_FORMAT(#{s_time2},'%Y-%m-01 08:00:00'), DATE_ADD(NOW(), INTERVAL 1 DAY))
                        ELSE TIMESTAMPDIFF(SECOND, DATE_FORMAT(#{s_time2},'%Y-%m-01 08:00:00'), CONCAT(DATE_ADD(#{s_time2}, INTERVAL 1 DAY),' 08:00:00'))
                    END AS w_m_sec                    
            ) B ON A.plac_cd = B.du_plac_cd AND A.plnt_cd = B.du_plnt_cd
            LEFT OUTER JOIN (
                SELECT * FROM tb_facility WHERE ch_idx < 30
            ) C ON A.mach_code = C.facility_mach_code
            WHERE A.mach_code =  #{m_code}
              AND A.end_time >= B.w_stime_month
              AND A.end_time <= B.w_etime_month
        ) AA
    ) BB
    GROUP BY mach_code, facility_name
) AS CC

  ]]>
</select>

  
<select id="getReportInputLIst" parameterType="Work" resultType="Work">
  <![CDATA[
SELECT *
FROM (
	SELECT *
	FROM (
		SELECT *,
		CASE 
			WHEN b_a = '주간' THEN CONCAT(date, ' 08:00:00')
			ELSE CONCAT(date, ' 20:00:00') 
		END AS dssa,
		(tank_temp + visocosity + specific_gravity + chiller_temp) AS row_sum
		FROM tb_part_temp
	) AS A
	WHERE date = #{s_time2}
	  AND mch_code = #{m_code}
	  AND row_sum <> 0
) AS AA
LEFT OUTER JOIN
(
	SELECT t.*
	FROM tb_temp_data t
	JOIN (
	    -- HOUR = 8, 20 별로 가장 빠른
	    SELECT 
	      MIN(temp_time) AS tm
	    FROM tb_temp_data
	    WHERE DATE(temp_time) = #{s_time2}
	      AND HOUR(temp_time) IN (8, 20)
	    GROUP BY HOUR(temp_time)
	) AS m
	ON t.temp_time = m.tm
) AS BB
ON LEFT(dssa, 16) = LEFT(temp_time, 16);
  ]]>
</select>


  
  
  <insert id="getReportInput" parameterType="Work">
  INSERT INTO tb_report_input (
    input_date,
    mch_code,
    mch_name,
    gb,
    visc,
    pre_temp,
    heat_temp,
    liq_temp,
    sg
  ) VALUES (
    #{s_time},
    #{m_code},
    #{mch_name},
    #{gb},
    #{visc},
    #{pre_temp},
    #{heat_temp},
    #{liq_temp},
    #{sg}
  )
</insert>
  <insert id="insertReportInput" parameterType="Work">
  INSERT INTO tb_report_input (
    idx,
    input_date,
    mch_code,
    mch_name,
    gb,
    visc,
    pre_temp,
    heat_temp,
    liq_temp,
    sg
  ) VALUES (
    #{idx},
    #{input_date},
    #{mch_code},
    #{mch_name},
    #{gb},
    #{visc},
    #{pre_temp},
    #{heat_temp},
    #{liq_temp},
    #{sg}
  )
  ON DUPLICATE KEY UPDATE
    input_date = VALUES(input_date),
    mch_code = VALUES(mch_code),
    mch_name = VALUES(mch_name),
    gb = VALUES(gb),
    visc = VALUES(visc),
    pre_temp = VALUES(pre_temp),
    heat_temp = VALUES(heat_temp),
    liq_temp = VALUES(liq_temp),
    sg = VALUES(sg)
</insert>
  
  
  <delete id="deleteReportInput" parameterType="Work">
  DELETE FROM tb_report_input
  WHERE idx = #{idx}
  </delete>
  
  
  
<select id="MonitoringStatusList" parameterType="Work" resultType="Work">
<![CDATA[
SELECT 
  facility_name,
  mach_code,
  std_weight,
  c_t,
  division AS aa,
  bb,
  work_day,
  set_hr,
  mok_hr,
  capa_day,
  -- 일별 tong 기준 지표
  ROUND((tong * std_weight) / 1000, 1) AS day_ton,
  ROUND((((tong * std_weight) / 1000) / capa_day) * 100, 1) AS percent_day,
  ROUND((tong * std_weight) / 1000 - capa_day, 1) AS bujok_day,
  -- 월별 기준 지표 추가
  ROUND((work_month * capa_day), 1) AS capa_month, --
  ROUND((m_tong * std_weight) / 1000, 1) AS month_ton, --
  ROUND((((m_tong * std_weight) / 1000) / (work_month * capa_day)) * 100, 1) AS percent_month, --
  ROUND((m_tong * std_weight) / 1000 - (work_month * capa_day), 1) AS bujok_month, --
  ROUND((work_day / capa_day) * 1000,1) AS capa_sum,
  '1' AS cc,
  '1' AS dd,
  '1' AS ee,
  tong,
  m_tong
FROM (
  SELECT 
    mach_code,
    facility_name,
    std_weight,
    c_t,
    1 AS aa,
    1 AS bb,
    work_day,
    work_month,
    work_day * 24 AS set_hr,
    work_day * 24 AS mok_hr,
    ROUND((capa * std_weight) / 1000,1) AS capa_day,
    division,
    tong,
    m_tong
  FROM (
    SELECT 
      mach_code,
      MAX(facility_name) AS facility_name,
      SUM(CASE WHEN start_time >= start_time_day THEN 1 ELSE 0 END) AS tong,     -- 일 tong
      COUNT(*) AS m_tong,                                                        -- 월 tong
      ROUND(SUM(weight), 0) AS weight,
      work_day,
      work_month,
      ROUND(SUM(weight), 0) AS weight_day,
      MAX(work_time) AS work_time,
      MAX(c_t) AS c_t,
      MAX(capa) AS capa,
      MAX(std_weight) AS std_weight,
      MAX(division) AS division
    FROM (
      SELECT 
        *,
        LEAD(start_time) OVER (PARTITION BY mach_code, barcode_no ORDER BY start_time DESC) AS next_start_time,
        1 AS tong,
		CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN  
			TIMESTAMPDIFF(HOUR,CONCAT(DATE_FORMAT(LEFT(#{s_time},8), '%Y-%m-%d'),' 08:00:00'), NOW())
		ELSE  
			24
		END AS work_time,
        DAY(LAST_DAY(CONCAT(DATE_FORMAT(LEFT(#{s_time},8),'%Y-%m-%d'),' 08:00:00'))) AS work_day,
        DAY(LAST_DAY(CONCAT(DATE_FORMAT(LEFT(#{s_time},8),'%Y-%m-%d'),' 08:00:00'))) AS work_month
      FROM tb_lowdata_save AS A
      LEFT JOIN (
        SELECT 
          'JH_KR_01' AS plac_cd_t, 
          '02' AS plnt_cd_t,
          -- 오늘 08시
          CASE 
            WHEN CAST(LEFT(#{s_time}, 2) AS UNSIGNED) < 8 
            THEN CONCAT(DATE_FORMAT(DATE_SUB(STR_TO_DATE(#{s_time}, '%Y%m%d%H%i%s'), INTERVAL 1 DAY), '%Y%m%d'),'080000')
            ELSE CONCAT(SUBSTR(#{s_time},1,8),'080000')
          END AS start_time_day,
          -- 월 1일 08시
          CONCAT(#{start_month}, '01', '080000') AS start_time_month
        FROM dual
      ) B
      ON A.plac_cd = B.plac_cd_t
      AND A.plnt_cd = B.plnt_cd_t
      LEFT JOIN 
      (SELECT 
       facility_mach_code, facility_name,
       c_t, capa, std_weight, division, work_time2
       FROM tb_facility 
      ) AS C
        ON A.mach_code = C.facility_mach_code
      WHERE A.start_time >= CONCAT(#{start_month}, '01', '080000')
    ) A
    WHERE next_start_time IS NULL
    GROUP BY mach_code
  ) AA
) BB;
]]>
</select>




<select id="MonitoringStatusList2" parameterType="Work" resultType="Work">
<![CDATA[

SELECT 
     AAA.ch_idx,
     AAA.facility_name,
     AAA.C,
     AAA.C_min,
     AAA.D,
     AAA.E,
     AAA.F,
     AAA.G,
     AAA.H,
     AAA.H_min,
     AAA.I,
     BBB.J,
     BBB.K,	
     BBB.L,
     ROUND(BBB.L / AAA.F, 1) * 100 AS M,
     ROUND(BBB.L / AAA.I, 1) * 100 AS N,
     L - F AS O,
     L - I AS P,
     Q AS Q,
     ROUND(((L - I) * 170) / 1000,1) AS R,
     ROUND((L - I) / D, 1) AS S,
     ROUND((L - I) / D, 1) * 60 AS T,
    ROUND((ROUND(D / NULLIF((L - I), 0), 1) * 60 / (H_min * 60)) * 100, 1) AS U
FROM (
	SELECT 
		facility_code, facility_name, facility_mach_code,
		facility_comment, c_t, capa, c_t_hour,
		std_weight, ch_idx, division,
	    facility_name AS B,
	    -- CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END AS C,  -- 실 가동 시간 (분)    
	    CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END AS C,  -- 실 가동 시간 (분)    
	    TIME_FORMAT(SEC_TO_TIME((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END) * 60), '%H:%i') AS C_min, -- 시:분   
	    c_t_hour AS D,  -- 시간당 생산량 (통)    
	    ROUND((c_t_hour * 12), 0) AS E, -- 조별 생산
	    ROUND((c_t_hour * 12), 0) * 2 AS F, -- 일 CAPA통,	    
	    '01:20' AS G,  -- 실가동 시간
	    ROUND(((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END - TIME_TO_SEC('01:20')/60)/60),0) AS H,    
	    TIME_FORMAT(SEC_TO_TIME((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END - TIME_TO_SEC('01:20')/60)*60),'%H:%i') AS H_min,
	    ROUND(((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END - TIME_TO_SEC('01:20')/60)/60),0) * 
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (du.work_time*60) END) * (c_t_hour / 60), 1) AS I,
	    "없음" AS Q,
		du.work_time, work_gb
	FROM (
		SELECT *, 'Z' AS Z
		FROM tb_facility
		WHERE ch_idx != 9999
	) AS fac
	LEFT OUTER JOIN
	(
	  	SELECT
	  	'Z' AS ZZ,
		CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN  
			TIMESTAMPDIFF(HOUR,CONCAT(DATE_FORMAT(LEFT(#{s_time},8), '%Y-%m-%d'),' 08:00:00'), NOW())
		ELSE  
			24
		END AS work_time,
		CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN 0 ELSE 1 END work_gb
	) AS du
	ON fac.Z = du.ZZ
) AS AAA
INNER JOIN (
	SELECT
		mach_code,
		-- 전체 범위 내 개수
	    SUM(CASE
	      WHEN end_time >= #{s_time} AND end_time < #{e_time}
	      THEN 1 ELSE 0 END) AS L,
	    -- 주간조: 당일 08:00:00 ~ 당일 20:00:00
	    SUM(CASE
	      WHEN end_time >= CONCAT(SUBSTR(#{s_time}, 1, 8), '080000')
	       AND end_time <  CONCAT(SUBSTR(#{s_time}, 1, 8), '200000')
	      THEN 1 ELSE 0 END) AS J,
	    -- 야간조: 전날 20:00:00 ~ 당일 08:00:00
	    SUM(CASE
	      WHEN end_time >= CONCAT(DATE_FORMAT(DATE_SUB(STR_TO_DATE(SUBSTR(#{s_time}, 1, 8), '%Y%m%d'), INTERVAL 1 DAY), '%Y%m%d'), '200000')
	       AND end_time <  CONCAT(SUBSTR(#{s_time}, 1, 8), '080000')
	      THEN 1 ELSE 0 END) AS K
	FROM tb_lowdata_save
	WHERE start_time IS NOT NULL
    AND end_time IS NOT NULL
    AND end_time >= #{s_time}
    AND end_time <  #{e_time}
	GROUP BY mach_code
) AS BBB
ON AAA.facility_mach_code = BBB.mach_code
ORDER BY AAA.ch_idx;



]]>
</select>


</mapper>