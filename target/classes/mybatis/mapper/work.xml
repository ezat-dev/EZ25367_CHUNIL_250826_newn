<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="work">


<select id="getInventoryStatusList" parameterType="Work" resultType="Work">
    SELECT * FROM tb_medication_situation
    WHERE date >= #{startDate}
</select>



<update id="insertinventoryStatus" parameterType="map">
  UPDATE tb_medication_situation
  SET
    `date` = #{date},
    `status` = #{status},
    `next_month` = #{next_month},
    `stock_cnt` = #{stock_cnt},
    <choose>
      <when test="drug_name == 'geomet_g1'">
        geomet_g1 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_g2'">
        geomet_g2 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_adding'">
        geomet_adding = #{field_name}
      </when>
      <when test="drug_name == 'pluse'">
        pluse = #{field_name}
      </when>
      <when test="drug_name == 'ml_h'">
        ml_h = #{field_name}
      </when>
      <when test="drug_name == 'ml_g'">
        ml_g = #{field_name}
      </when>
      <when test="drug_name == 'k_black'">
        k_black = #{field_name}
      </when>
      <when test="drug_name == 'naoh_99'">
        naoh_99 = #{field_name}
      </when>
      <when test="drug_name == 'sc_300a'">
        sc_300a = #{field_name}
      </when>
      <when test="drug_name == 'sc330b_3x'">
        sc330b_3x = #{field_name}
      </when>
      <when test="drug_name == 'sc330_liquid'">
        sc330_liquid = #{field_name}
      </when>
      <when test="drug_name == 'geomet_sus'">
        geomet_sus = #{field_name}
      </when>
      <when test="drug_name == 'ed2800_a_black'">
        ed2800_a_black = #{field_name}
      </when>
      <when test="drug_name == 'ed2800_b'">
        ed2800_b = #{field_name}
      </when>
      <when test="drug_name == 'geomet_005'">
        geomet_005 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_069'">
        geomet_069 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_p_210'">
        geomet_p_210 = #{field_name}
      </when>
      <when test="drug_name == 'geomet_sq_70'">
        geomet_sq_70 = #{field_name}
      </when>
    </choose>
  WHERE id = #{id}
</update>







 <select id="getMachineEfficStatusList" resultType="Work">
    SELECT facility_name, a, b, c, d
    FROM v_machineefficstatus
</select>






  <select id="getWorkDailyList" parameterType="Work" resultType="Work">
    SELECT
      ROW_NUMBER() OVER(ORDER BY end_time) AS r_num,
      start_time,
      end_time,
      tong_day,
      weight_day,
      item_nm,
      item_cd,
      next_facility,
	  CASE WHEN division_weight = 0 THEN 0
		   ELSE
				CASE WHEN (weight_day / division_weight) > 1 THEN FLOOR((weight_day / division_weight)) + 1
			         ELSE 1 END
	  END AS a, /*분할횟수*/
      '' AS b, /*검사항목(내용)*/
      '' AS c,/*검사항목(파일)*/      
      '' AS d,/*검사항목(합부판정)*/
      '' AS e,/*구분(신규/재작업)*/
      '' AS f/*비고*/      
    FROM (
	     SELECT 
	        mach_code, end_time, start_time, tong_day, weight_day,
	        aa.item_cd, aa.item_nm,
	        ab.coating_nm AS next_facility,
			CASE WHEN aa.mach_code = ab.mach_main THEN mach_main_weight
				 WHEN aa.mach_code = ab.mach_sub THEN mach_sub_weight
				 ELSE 0
			END division_weight
	  FROM (
        SELECT
          mach_code,
          barcode_no,
          weight AS weight_day,
          1 AS tong_day,
          fac.facility_name,
          start_time,
          end_time,
          item_cd,
          item_nm,
          LEAD(start_time) OVER(PARTITION BY mach_code, barcode_no ORDER BY start_time DESC) AS next_start_time
        FROM tb_lowdata_save AS lows
        INNER JOIN tb_facility AS fac
          ON lows.mach_code = fac.facility_mach_code
        WHERE 1=1
          <if test="s_time != null">
            AND start_time &gt;= #{s_time}
          </if>
          <if test="e_time != null">
            AND end_time &lt;= #{e_time}
          </if>
		<if test="m_code2 != null and m_code2 != ''">
		  AND mach_code IN (${m_code2})
		</if>

          AND weight IS NOT NULL
          AND start_time IS NOT NULL
          AND end_time IS NOT NULL
      ) AS aa
	  INNER JOIN
	  	pwo_geo_division_data AS ab
	  ON aa.item_cd = ab.item_cd
    ) AS bb
    <where>
      <if test="m_code != null">
        mach_code = #{m_code}
      </if>
    </where>
    ORDER BY end_time
  </select>
  
  
 <select id="getWorkDailySum" parameterType="Work" resultType="Work">
  SELECT
    mach_code,
    tong_day,
    FORMAT((tong_day * std_weight), 0)          AS weight_day,
    tong_sum,
    FORMAT((tong_sum * std_weight), 0)          AS weight_sum,
    CONCAT(
      LPAD(FLOOR(work_minutes / 60), 2, '0'),
      ':',
      LPAD(work_minutes % 60,     2, '0')
    )                                            AS work_time,
    ROUND(work_minutes / (24 * 60), 1)           AS work_percent,
    (diff_day * 24)                             AS sum_time,
    ROUND((diff_day * 20) / (diff_day * 24), 4)  AS sum_percent,
    FORMAT((tong_day * std_weight) / tong_day, 1) AS avg_day,
    FORMAT((tong_sum * std_weight) / tong_sum, 1) AS avg_sum,
    ROUND(work_minutes / 60 / tong_day, 2)       AS uph,
    ROUND((diff_day * 24) / tong_sum, 2)         AS uph_sum
  FROM (
    SELECT
      mach_code,
      SUM(CASE WHEN end_time BETWEEN #{s_time} AND #{e_time} THEN 1 ELSE 0 END)   AS tong_day,
      SUM(CASE WHEN end_time BETWEEN #{s_time} AND #{e_time} THEN weight ELSE 0 END) AS weight_day,
      SUM(1)                             AS tong_sum,
      SUM(weight)                        AS weight_sum,
      MAX(
        CASE
          WHEN end_time BETWEEN #{s_time} AND #{e_time}
          THEN GREATEST(
                 TIMESTAMPDIFF(
                   MINUTE,
                   STR_TO_DATE(DATE_FORMAT(NOW(), '%Y%m%d080000'), '%Y%m%d%H%i%s'),
                   NOW()
                 ),
                 1
               )
          ELSE 0
        END
      )                                   AS work_minutes,
      TIMESTAMPDIFF(
        DAY,
        MIN(end_time),
        MAX(end_time)
      )                                   AS diff_day,
      MAX(std_weight)                    AS std_weight
    FROM tb_lowdata_save lows
    INNER JOIN tb_facility fac
      ON lows.mach_code = fac.facility_mach_code
    WHERE 1=1
      <if test="m_code != null">
        AND mach_code = #{m_code}
      </if>
      <if test="s_time != null">
        AND start_time &gt;= #{s_time}
      </if>
      <if test="e_time != null">
        AND end_time &lt;= #{e_time}
      </if>
      AND weight IS NOT NULL
      AND start_time IS NOT NULL
      AND end_time IS NOT NULL
    GROUP BY mach_code
  ) AS agg
</select>

  
<select id="getReportInputLIst" parameterType="Work" resultType="Work">
  SELECT
    idx,
    input_date,
    mch_code,
    mch_name,
    gb,
    visc,
    pre_temp,
    heat_temp,
    liq_temp,
    sg
  FROM tb_report_input
  WHERE 1=1
    <if test="s_time != null and e_time != null">
      AND input_date BETWEEN #{s_time} AND #{e_time}
    </if>
    <if test="m_code != null">
      AND mch_code = #{m_code}
    </if>
</select>

  
  
  <insert id="getReportInput" parameterType="Work">
  INSERT INTO tb_report_input (
    input_date,
    mch_code,
    mch_name,
    gb,
    visc,
    pre_temp,
    heat_temp,
    liq_temp,
    sg
  ) VALUES (
    #{s_time},
    #{m_code},
    #{mch_name},
    #{gb},
    #{visc},
    #{pre_temp},
    #{heat_temp},
    #{liq_temp},
    #{sg}
  )
</insert>
  <insert id="insertReportInput" parameterType="Work">
  INSERT INTO tb_report_input (
    idx,
    input_date,
    mch_code,
    mch_name,
    gb,
    visc,
    pre_temp,
    heat_temp,
    liq_temp,
    sg
  ) VALUES (
    #{idx},
    #{input_date},
    #{mch_code},
    #{mch_name},
    #{gb},
    #{visc},
    #{pre_temp},
    #{heat_temp},
    #{liq_temp},
    #{sg}
  )
  ON DUPLICATE KEY UPDATE
    input_date = VALUES(input_date),
    mch_code = VALUES(mch_code),
    mch_name = VALUES(mch_name),
    gb = VALUES(gb),
    visc = VALUES(visc),
    pre_temp = VALUES(pre_temp),
    heat_temp = VALUES(heat_temp),
    liq_temp = VALUES(liq_temp),
    sg = VALUES(sg)
</insert>
  
  
  <delete id="deleteReportInput" parameterType="Work">
  DELETE FROM tb_report_input
  WHERE idx = #{idx}
  </delete>
  
  
  
<select id="MonitoringStatusList" parameterType="Work" resultType="Work">
<![CDATA[
SELECT 
  facility_name,
  mach_code,
  std_weight,
  c_t,
  division AS aa,
  bb,
  work_day,
  set_hr,
  mok_hr,
  capa_day,
  -- 일별 tong 기준 지표
  ROUND((tong * std_weight) / 1000, 1) AS day_ton,
  ROUND((((tong * std_weight) / 1000) / capa_day) * 100, 1) AS percent_day,
  ROUND((tong * std_weight) / 1000 - capa_day, 1) AS bujok_day,
  -- 월별 기준 지표 추가
  ROUND((work_month * capa_day), 1) AS capa_month, --
  ROUND((m_tong * std_weight) / 1000, 1) AS month_ton, --
  ROUND((((m_tong * std_weight) / 1000) / (work_month * capa_day)) * 100, 1) AS percent_month, --
  ROUND((m_tong * std_weight) / 1000 - (work_month * capa_day), 1) AS bujok_month, --
  ROUND((work_day / capa_day) * 1000,1) AS capa_sum,
  '1' AS cc,
  '1' AS dd,
  '1' AS ee,
  tong,
  m_tong
FROM (
  SELECT 
    mach_code,
    facility_name,
    std_weight,
    c_t,
    1 AS aa,
    1 AS bb,
    work_day,
    work_month,
    work_day * 24 AS set_hr,
    work_day * 24 AS mok_hr,
    ROUND((capa * std_weight) / 1000,1) AS capa_day,
    division,
    tong,
    m_tong
  FROM (
    SELECT 
      mach_code,
      MAX(facility_name) AS facility_name,
      SUM(CASE WHEN start_time >= start_time_day THEN 1 ELSE 0 END) AS tong,     -- 일 tong
      COUNT(*) AS m_tong,                                                        -- 월 tong
      ROUND(SUM(weight), 0) AS weight,
      work_day,
      work_month,
      ROUND(SUM(weight), 0) AS weight_day,
      MAX(work_time) AS work_time,
      MAX(c_t) AS c_t,
      MAX(capa) AS capa,
      MAX(std_weight) AS std_weight,
      MAX(division) AS division
    FROM (
      SELECT 
        *,
        LEAD(start_time) OVER (PARTITION BY mach_code, barcode_no ORDER BY start_time DESC) AS next_start_time,
        1 AS tong,
		CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN  
			TIMESTAMPDIFF(HOUR,CONCAT(DATE_FORMAT(LEFT(#{s_time},8), '%Y-%m-%d'),' 08:00:00'), NOW())
		ELSE  
			24
		END AS work_time,
        DAY(LAST_DAY(CONCAT(DATE_FORMAT(LEFT(#{s_time},8),'%Y-%m-%d'),' 08:00:00'))) AS work_day,
        DAY(LAST_DAY(CONCAT(DATE_FORMAT(LEFT(#{s_time},8),'%Y-%m-%d'),' 08:00:00'))) AS work_month
      FROM tb_lowdata_save AS A
      LEFT JOIN (
        SELECT 
          'JH_KR_01' AS plac_cd_t, 
          '02' AS plnt_cd_t,
          -- 오늘 08시
          CASE 
            WHEN CAST(LEFT(#{s_time}, 2) AS UNSIGNED) < 8 
            THEN CONCAT(DATE_FORMAT(DATE_SUB(STR_TO_DATE(#{s_time}, '%Y%m%d%H%i%s'), INTERVAL 1 DAY), '%Y%m%d'),'080000')
            ELSE CONCAT(SUBSTR(#{s_time},1,8),'080000')
          END AS start_time_day,
          -- 월 1일 08시
          CONCAT(#{start_month}, '01', '080000') AS start_time_month
        FROM dual
      ) B
        ON A.plac_cd = B.plac_cd_t
       AND A.plnt_cd = B.plnt_cd_t
      LEFT JOIN tb_facility C
        ON A.mach_code = C.facility_mach_code
      WHERE A.start_time >= CONCAT(#{start_month}, '01', '080000')
    ) A
    WHERE next_start_time IS NULL
    GROUP BY mach_code
  ) AA
) BB;
]]>
</select>




<select id="MonitoringStatusList2" parameterType="Work" resultType="Work">
<![CDATA[

SELECT 
     AAA.ch_idx,
     AAA.facility_name,
     AAA.C,
     AAA.C_min,
     AAA.D,
     AAA.E,
     AAA.F,
     AAA.G,
     AAA.H,
     AAA.H_min,
     AAA.I,
     BBB.J,
     BBB.K,	
     BBB.L,
     ROUND(BBB.L / AAA.F, 1) * 100 AS M,
     ROUND(BBB.L / AAA.I, 1) * 100 AS N,
     L - F AS O,
     L - I AS P,
     Q AS Q,
     ROUND(((L - I) * 170) / 1000,1) AS R,
     ROUND((L - I) / D, 1) AS S,
     ROUND((L - I) / D, 1) * 60 AS T,
    ROUND((ROUND(D / NULLIF((L - I), 0), 1) * 60 / (H_min * 60)) * 100, 1) AS U



FROM (
	SELECT 
		facility_code, facility_name, facility_mach_code,
		facility_comment, c_t, capa, c_t_hour,
		std_weight, ch_idx, division,
	    facility_name AS B,
	    -- CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END AS C,  -- 실 가동 시간 (분)    
	    CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END AS C,  -- 실 가동 시간 (분)    
	    TIME_FORMAT(SEC_TO_TIME((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) * 60), '%H:%i') AS C_min, -- 시:분   
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) * (c_t_hour / 60), 1) AS D,  -- 시간당 생산량 (통)    
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END)  / 60,1) 	    	* 
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) * (c_t_hour / 60), 1) AS E, -- 조별 생산
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) / 60,1) 	    	* 
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) * (c_t_hour / 60), 1) * 2 AS F, -- 일 CAPA통,	    
	    '01:20' AS G,  -- 실가동 시간
	    ROUND(((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END - TIME_TO_SEC('01:20')/60)/60),0) AS H,    
	    TIME_FORMAT(SEC_TO_TIME((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END - TIME_TO_SEC('01:20')/60)*60),'%H:%i') AS H_min,
	    ROUND(((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END - TIME_TO_SEC('01:20')/60)/60),0) * 
	    ROUND((CASE WHEN work_gb = 0 THEN TIMESTAMPDIFF(MINUTE, CONCAT(CURDATE(), ' 08:00:00'), NOW()) ELSE (work_time*60) END) * (c_t_hour / 60), 1) AS I,
	    "없음" AS Q,
		work_time, work_gb
	FROM (
		SELECT *, 'Z' AS Z
	  FROM tb_facility
	  WHERE ch_idx != 9999
	) AS fac
  LEFT OUTER JOIN
  (
  	SELECT
  	'Z' AS ZZ,
	CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN  
		TIMESTAMPDIFF(HOUR,CONCAT(DATE_FORMAT(LEFT(#{s_time},8), '%Y-%m-%d'),' 08:00:00'), NOW())
	ELSE  
		24
	END AS work_time,
	CASE WHEN DATE_FORMAT(SUBSTR(#{s_time},1,8),'%Y-%m-%d') = CURDATE() THEN 0 ELSE 1 END work_gb
  ) AS du
  ON fac.Z = du.ZZ
) AS AAA
INNER JOIN (
  SELECT
    mach_code,
    
    -- 전체 범위 내 개수
    SUM(CASE
      WHEN end_time >= #{s_time} AND end_time < #{e_time}
      THEN 1 ELSE 0 END) AS L,

    -- 주간조: 당일 08:00:00 ~ 당일 20:00:00
    SUM(CASE
      WHEN end_time >= CONCAT(SUBSTR(#{s_time}, 1, 8), '080000')
       AND end_time <  CONCAT(SUBSTR(#{s_time}, 1, 8), '200000')
      THEN 1 ELSE 0 END) AS J,

    -- 야간조: 전날 20:00:00 ~ 당일 08:00:00
    SUM(CASE
      WHEN end_time >= CONCAT(DATE_FORMAT(DATE_SUB(STR_TO_DATE(SUBSTR(#{s_time}, 1, 8), '%Y%m%d'), INTERVAL 1 DAY), '%Y%m%d'), '200000')
       AND end_time <  CONCAT(SUBSTR(#{s_time}, 1, 8), '080000')
      THEN 1 ELSE 0 END) AS K

  FROM tb_lowdata_save
  WHERE start_time IS NOT NULL
    AND end_time IS NOT NULL
    AND end_time >= #{s_time}
    AND end_time <  #{e_time}
  GROUP BY mach_code
) AS BBB

ON AAA.facility_mach_code = BBB.mach_code
ORDER BY AAA.ch_idx;



]]>
</select>


</mapper>


